{
  "version": 3,
  "sources": ["../src/api.ts", "../src/constants.ts", "../src/elements.ts", "../src/state.ts", "../src/utils.ts", "../src/controller.ts", "../src/index.ts"],
  "sourcesContent": ["import { BreakpointRequest, CreateSessionRequest, RunRequest, StepRequest } from './types';\n\nconst JSON_HEADERS = { 'Content-Type': 'application/json' } as const;\n\nexport function createSession(request: CreateSessionRequest): Promise<Response> {\n  return fetch('/api/session', {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify(request),\n  });\n}\n\nexport function getSession(sessionId: string): Promise<Response> {\n  return fetch(`/api/session/${encodeURIComponent(sessionId)}`);\n}\n\nexport function stepSession(sessionId: string, request: StepRequest): Promise<Response> {\n  return fetch(`/api/session/${encodeURIComponent(sessionId)}/step`, {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify(request),\n  });\n}\n\nexport function runSession(sessionId: string, request: RunRequest): Promise<Response> {\n  return fetch(`/api/session/${encodeURIComponent(sessionId)}/run`, {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify(request),\n  });\n}\n\nexport function resetSession(sessionId: string): Promise<Response> {\n  return fetch(`/api/session/${encodeURIComponent(sessionId)}/reset`, {\n    method: 'POST',\n  });\n}\n\nexport function addBreakpoint(sessionId: string, request: BreakpointRequest): Promise<Response> {\n  return fetch(`/api/session/${encodeURIComponent(sessionId)}/breakpoints`, {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify(request),\n  });\n}\n\nexport function removeBreakpointRequest(sessionId: string, pc: number): Promise<Response> {\n  return fetch(`/api/session/${encodeURIComponent(sessionId)}/breakpoints/${pc}`, {\n    method: 'DELETE',\n  });\n}\n", "export const TAPE_VIEW_SIZE = 20;\nexport const TAPE_MAX_INDEX = 30000;\nexport const CODE_LINE_WIDTH = 23;\nexport const DEFAULT_RUN_LIMIT = 10000;\nexport const HISTORY_CHIPS_MAX_VISIBLE = 8;\n", "function getElement<T extends HTMLElement>(id: string): T {\n  const element = document.getElementById(id);\n  if (!element) {\n    throw new Error(`Element with id \"${id}\" not found`);\n  }\n  return element as T;\n}\n\nexport interface UIElements {\n  code: HTMLTextAreaElement;\n  input: HTMLInputElement;\n  languageSelect: HTMLSelectElement;\n  compiledWrapper: HTMLElement;\n  compiledCode: HTMLTextAreaElement;\n  tapeWindow: HTMLInputElement;\n  stepCount: HTMLInputElement;\n  status: HTMLElement;\n  step: HTMLElement;\n  pc: HTMLElement;\n  command: HTMLElement;\n  pointer: HTMLElement;\n  output: HTMLElement;\n  finished: HTMLElement;\n  tape: HTMLElement;\n  codeWindow: HTMLElement;\n  createButton: HTMLButtonElement;\n  stepButton: HTMLButtonElement;\n  runButton: HTMLButtonElement;\n  resetButton: HTMLButtonElement;\n  historyFirst: HTMLButtonElement;\n  historyPrev: HTMLButtonElement;\n  historyNext: HTMLButtonElement;\n  historyLast: HTMLButtonElement;\n  historyRange: HTMLInputElement;\n  historyInfo: HTMLElement;\n  historyChips: HTMLElement;\n  runToBreakButton: HTMLButtonElement;\n  breakpointList: HTMLElement;\n}\n\nexport function resolveElements(): UIElements {\n  return {\n    code: getElement<HTMLTextAreaElement>('code'),\n    input: getElement<HTMLInputElement>('input'),\n    languageSelect: getElement<HTMLSelectElement>('language'),\n    compiledWrapper: getElement<HTMLElement>('compiled-wrapper'),\n    compiledCode: getElement<HTMLTextAreaElement>('compiled-code'),\n    tapeWindow: getElement<HTMLInputElement>('tape-window'),\n    stepCount: getElement<HTMLInputElement>('step-count'),\n    status: getElement<HTMLElement>('status'),\n    step: getElement<HTMLElement>('state-step'),\n    pc: getElement<HTMLElement>('state-pc'),\n    command: getElement<HTMLElement>('state-command'),\n    pointer: getElement<HTMLElement>('state-pointer'),\n    output: getElement<HTMLElement>('state-output'),\n    finished: getElement<HTMLElement>('state-finished'),\n    tape: getElement<HTMLElement>('tape'),\n    codeWindow: getElement<HTMLElement>('code-window'),\n    createButton: getElement<HTMLButtonElement>('create-session'),\n    stepButton: getElement<HTMLButtonElement>('step'),\n    runButton: getElement<HTMLButtonElement>('run'),\n    resetButton: getElement<HTMLButtonElement>('reset'),\n    historyFirst: getElement<HTMLButtonElement>('history-first'),\n    historyPrev: getElement<HTMLButtonElement>('history-prev'),\n    historyNext: getElement<HTMLButtonElement>('history-next'),\n    historyLast: getElement<HTMLButtonElement>('history-last'),\n    historyRange: getElement<HTMLInputElement>('history-range'),\n    historyInfo: getElement<HTMLElement>('history-info'),\n    historyChips: getElement<HTMLElement>('history-chips'),\n    runToBreakButton: getElement<HTMLButtonElement>('run-to-break'),\n    breakpointList: getElement<HTMLElement>('breakpoint-list'),\n  };\n}\n", "import { SessionState } from './types';\n\nexport interface AppState {\n  sessionId: string | null;\n  brainfuckCode: string;\n  sessionHistory: SessionState[];\n  sessionFinished: boolean;\n  currentBreakpoints: Set<number>;\n  selectedHistoryIndex: number;\n  isBusy: boolean;\n  totalSteps: number;\n  totalStepsCapped: boolean;\n}\n\nexport function createInitialState(): AppState {\n  return {\n    sessionId: null,\n    brainfuckCode: '',\n    sessionHistory: [],\n    sessionFinished: false,\n    currentBreakpoints: new Set<number>(),\n    selectedHistoryIndex: 0,\n    isBusy: false,\n    totalSteps: 0,\n    totalStepsCapped: false,\n  };\n}\n", "import { SupportedLanguage } from './types';\n\nexport function clampPositiveInt(value: string | number | null | undefined, fallback: number): number {\n  const parsed = typeof value === 'number' ? value : parseInt(String(value ?? ''), 10);\n  return Number.isFinite(parsed) && parsed > 0 ? parsed : fallback;\n}\n\nexport function escapeHtml(value: string): string {\n  return value.replace(/[&<>\\\"]/g, (char) => {\n    switch (char) {\n      case '&':\n        return '&amp;';\n      case '<':\n        return '&lt;';\n      case '>':\n        return '&gt;';\n      case '\"':\n        return '&quot;';\n      default:\n        return char;\n    }\n  });\n}\n\nexport function formatCodeChar(char: string | undefined): string {\n  if (!char) {\n    return '&nbsp;';\n  }\n  if (char === ' ') {\n    return '&nbsp;';\n  }\n  if (char === '\\n') {\n    return '\u23CE';\n  }\n  return escapeHtml(char);\n}\n\nexport function formatTotalSteps(total: number, capped: boolean, finished: boolean): string {\n  if (!total) {\n    return '';\n  }\n  if (capped && (!finished || total >= 10000)) {\n    return `${total}+`;\n  }\n  return String(total);\n}\n\nexport function parseSupportedLanguage(value: string): SupportedLanguage {\n  const normalized = value.toLowerCase();\n  if (normalized === 'brainfuck' || normalized === 'tinybf') {\n    return normalized;\n  }\n  return 'brainfuck';\n}\n", "import * as api from './api';\nimport {\n  CODE_LINE_WIDTH,\n  DEFAULT_RUN_LIMIT,\n  HISTORY_CHIPS_MAX_VISIBLE,\n  TAPE_MAX_INDEX,\n  TAPE_VIEW_SIZE,\n} from './constants';\nimport { resolveElements } from './elements';\nimport { AppState, createInitialState } from './state';\nimport {\n  BreakpointRequest,\n  CreateSessionRequest,\n  DetailPayload,\n  RunRequest,\n  SessionLikePayload,\n  SessionPayload,\n  SessionSelectionOptions,\n  SessionState,\n  StepResponse,\n  SupportedLanguage,\n} from './types';\nimport {\n  clampPositiveInt,\n  formatCodeChar,\n  formatTotalSteps,\n  parseSupportedLanguage,\n} from './utils';\n\nexport class AppController {\n  private readonly elements = resolveElements();\n  private readonly state: AppState;\n\n  constructor() {\n    this.state = createInitialState();\n  }\n\n  public init(): void {\n    this.bindEvents();\n    this.toggleCompiledVisibility(parseSupportedLanguage(this.elements.languageSelect.value));\n    void this.createSession();\n  }\n\n  private bindEvents(): void {\n    this.elements.createButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      void this.createSession();\n    });\n\n    this.elements.stepButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      void this.stepSession();\n    });\n\n    this.elements.runButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      void this.runSessionToEnd();\n    });\n\n    this.elements.resetButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      void this.resetSession();\n    });\n\n    this.elements.runToBreakButton.addEventListener('click', (event) => {\n      event.preventDefault();\n      void this.runToBreakpoint();\n    });\n\n    this.elements.languageSelect.addEventListener('change', () => {\n      const language = parseSupportedLanguage(this.elements.languageSelect.value);\n      this.toggleCompiledVisibility(language);\n    });\n\n    this.elements.historyFirst.addEventListener('click', () => {\n      this.setHistoryIndex(0, { preview: false, updateSlider: true });\n      this.refreshHistoryButtons();\n      this.updateHistoryChips(false);\n    });\n\n    this.elements.historyPrev.addEventListener('click', () => {\n      this.setHistoryIndex(this.state.selectedHistoryIndex - 1, { preview: false, updateSlider: true });\n      this.refreshHistoryButtons();\n      this.updateHistoryChips(false);\n    });\n\n    this.elements.historyNext.addEventListener('click', () => {\n      this.setHistoryIndex(this.state.selectedHistoryIndex + 1, { preview: false, updateSlider: true });\n      this.refreshHistoryButtons();\n      this.updateHistoryChips(false);\n    });\n\n    this.elements.historyLast.addEventListener('click', () => {\n      this.setHistoryIndex(this.state.sessionHistory.length - 1, { preview: false, updateSlider: true });\n      this.refreshHistoryButtons();\n      this.updateHistoryChips(false);\n    });\n\n    this.elements.historyRange.addEventListener('input', (event) => {\n      const index = parseInt((event.target as HTMLInputElement).value, 10);\n      this.setHistoryIndex(index, { preview: true, updateSlider: false });\n      this.refreshHistoryButtons();\n      this.updateHistoryChips(true);\n    });\n\n    this.elements.historyRange.addEventListener('change', (event) => {\n      const index = parseInt((event.target as HTMLInputElement).value, 10);\n      this.setHistoryIndex(index, { preview: false, updateSlider: false });\n      this.refreshHistoryButtons();\n      this.updateHistoryChips(false);\n    });\n\n    this.elements.codeWindow.addEventListener('click', (event) => {\n      const target = (event.target as HTMLElement | null)?.closest('[data-pc]');\n      if (!target) {\n        return;\n      }\n      const pc = Number((target as HTMLElement).dataset.pc);\n      if (!Number.isFinite(pc)) {\n        return;\n      }\n      void this.toggleBreakpoint(pc);\n    });\n  }\n\n  private setBusy(value: boolean): void {\n    this.state.isBusy = value;\n  }\n\n  private setStatus(text: string, isError = false): void {\n    this.elements.status.textContent = text;\n    this.elements.status.classList.toggle('error', isError);\n  }\n\n  private toggleCompiledVisibility(language: SupportedLanguage): void {\n    const showCompiled = language === 'tinybf';\n    this.elements.compiledWrapper.hidden = !showCompiled;\n    if (!showCompiled) {\n      this.elements.compiledCode.value = '';\n    }\n  }\n\n  private getSessionPayload(): CreateSessionRequest {\n    const rawWindow = clampPositiveInt(this.elements.tapeWindow.value, 10);\n    const minimumWindow = Math.ceil(TAPE_VIEW_SIZE / 2);\n    const effectiveWindow = Math.max(rawWindow, minimumWindow);\n    if (effectiveWindow !== rawWindow) {\n      this.elements.tapeWindow.value = String(effectiveWindow);\n    }\n    const language = parseSupportedLanguage(this.elements.languageSelect.value);\n    return {\n      code: this.elements.code.value,\n      input: this.elements.input.value,\n      tape_window: effectiveWindow,\n      language,\n    };\n  }\n\n  private applySessionPayload(payload: SessionLikePayload, options: SessionSelectionOptions): void {\n    this.state.sessionId = payload.session_id;\n    this.state.sessionFinished = Boolean(payload.finished);\n    this.state.brainfuckCode = payload.code || '';\n\n    const history = Array.isArray(payload.history) && payload.history.length > 0\n      ? payload.history\n      : 'state' in payload && payload.state\n        ? [payload.state]\n        : [];\n    this.state.sessionHistory = history;\n\n    this.state.currentBreakpoints = new Set(payload.breakpoints || []);\n    this.state.totalSteps = payload.total_steps || 0;\n    this.state.totalStepsCapped = Boolean(payload.total_steps_capped);\n\n    const language = parseSupportedLanguage(payload.language);\n    this.elements.languageSelect.value = language;\n    this.toggleCompiledVisibility(language);\n    if (language === 'tinybf') {\n      this.elements.compiledCode.value = this.state.brainfuckCode;\n    }\n\n    this.renderBreakpoints();\n    this.updateHistoryUI(options.selectLatestHistory);\n  }\n\n  private renderBreakpoints(): void {\n    const container = this.elements.breakpointList;\n    container.innerHTML = '';\n    const sorted = Array.from(this.state.currentBreakpoints).sort((a, b) => a - b);\n    if (!sorted.length) {\n      const empty = document.createElement('div');\n      empty.className = 'breakpoint-chip';\n      empty.textContent = 'No breakpoints';\n      container.appendChild(empty);\n      return;\n    }\n    sorted.forEach((pc) => {\n      const chip = document.createElement('span');\n      chip.className = 'breakpoint-chip';\n\n      const label = document.createElement('span');\n      label.textContent = `pc ${pc}`;\n\n      const remove = document.createElement('button');\n      remove.type = 'button';\n      remove.setAttribute('aria-label', `Remove breakpoint at pc ${pc}`);\n      remove.textContent = '\u00D7';\n      remove.addEventListener('click', () => {\n        void this.removeBreakpoint(pc);\n      });\n\n      chip.appendChild(label);\n      chip.appendChild(remove);\n      container.appendChild(chip);\n    });\n  }\n\n  private updateHistoryUI(selectLatest: boolean): void {\n    const total = this.state.sessionHistory.length;\n    this.elements.historyRange.max = total > 0 ? String(total - 1) : '0';\n    this.elements.historyRange.disabled = total <= 1;\n    const targetIndex = selectLatest ? Math.max(0, total - 1) : Math.min(this.state.selectedHistoryIndex, Math.max(0, total - 1));\n    this.setHistoryIndex(targetIndex, { preview: false, updateSlider: true });\n    this.refreshHistoryButtons();\n    this.updateHistoryChips(false);\n  }\n\n  private setHistoryIndex(index: number, options: { preview: boolean; updateSlider: boolean }): void {\n    if (!this.state.sessionHistory.length) {\n      return;\n    }\n    const clamped = Math.max(0, Math.min(index, this.state.sessionHistory.length - 1));\n    this.state.selectedHistoryIndex = clamped;\n    const state = this.state.sessionHistory[clamped];\n    const finished = clamped === this.state.sessionHistory.length - 1 && this.state.sessionFinished;\n    this.renderSessionState(state, finished);\n    this.updateHistoryInfo(clamped, this.state.sessionHistory.length, options.preview);\n    if (options.updateSlider) {\n      this.elements.historyRange.value = String(clamped);\n    }\n  }\n\n  private updateHistoryInfo(index: number, total: number, preview: boolean): void {\n    if (!total || !this.state.sessionHistory[index]) {\n      this.elements.historyInfo.textContent = 'Step 0 / 0';\n      this.elements.historyInfo.classList.remove('preview');\n      return;\n    }\n    const stepNum = this.state.sessionHistory[index].step;\n    const position = `${index + 1} / ${total}`;\n    const isLatest = index === total - 1;\n    let suffix = '';\n    if (preview && !isLatest) {\n      suffix = ' \u2013 preview';\n    } else if (!preview && !isLatest) {\n      suffix = ' \u2013 history';\n    }\n    this.elements.historyInfo.textContent = `Step ${stepNum} (${position})${suffix}`;\n    this.elements.historyInfo.classList.toggle('preview', !isLatest);\n  }\n\n  private refreshHistoryButtons(): void {\n    const total = this.state.sessionHistory.length;\n    const atStart = this.state.selectedHistoryIndex <= 0;\n    const atEnd = total === 0 || this.state.selectedHistoryIndex >= total - 1;\n    this.elements.historyFirst.disabled = atStart;\n    this.elements.historyPrev.disabled = atStart;\n    this.elements.historyNext.disabled = atEnd;\n    this.elements.historyLast.disabled = atEnd;\n  }\n\n  private updateHistoryChips(preview: boolean): void {\n    const container = this.elements.historyChips;\n    container.innerHTML = '';\n    if (!this.state.sessionHistory.length) {\n      const empty = document.createElement('div');\n      empty.className = 'history-chip';\n      empty.textContent = 'No history';\n      container.appendChild(empty);\n      return;\n    }\n    const total = this.state.sessionHistory.length;\n    const start = Math.max(0, total - HISTORY_CHIPS_MAX_VISIBLE);\n    for (let i = start; i < total; i += 1) {\n      const chip = document.createElement('button');\n      chip.type = 'button';\n      chip.className = 'history-chip';\n      chip.textContent = String(this.state.sessionHistory[i].step);\n      if (i === this.state.selectedHistoryIndex) {\n        chip.classList.add('is-active');\n        if (i !== total - 1 || preview) {\n          chip.classList.add('is-preview');\n        }\n      }\n      chip.addEventListener('click', () => {\n        this.setHistoryIndex(i, { preview: false, updateSlider: true });\n        this.refreshHistoryButtons();\n        this.updateHistoryChips(false);\n      });\n      container.appendChild(chip);\n    }\n  }\n\n  private renderSessionState(state: SessionState, finished: boolean): void {\n    const totalDisplay = formatTotalSteps(this.state.totalSteps, this.state.totalStepsCapped, finished);\n    this.elements.step.textContent = totalDisplay ? `${state.step}/${totalDisplay}` : String(state.step);\n    this.elements.pc.textContent = `${state.pc} / ${state.code_length}`;\n    this.elements.command.textContent = state.command !== null ? state.command : '(init)';\n    this.elements.pointer.textContent = String(state.pointer);\n    this.elements.output.textContent = state.output || '(empty)';\n    this.elements.finished.textContent = finished ? 'Yes' : 'No';\n    this.renderTape(state);\n    this.renderCodeWindow(this.state.brainfuckCode, state.pc);\n  }\n\n  private renderTape(state: SessionState): void {\n    const container = this.elements.tape;\n    container.innerHTML = '';\n    const pointer = state.pointer;\n    const leftCount = Math.floor((TAPE_VIEW_SIZE - 1) / 2);\n    const rightCount = TAPE_VIEW_SIZE - leftCount - 1;\n    let startIndex = pointer - leftCount;\n    if (startIndex < 0) {\n      startIndex = 0;\n    }\n    let endIndex = pointer + rightCount;\n    if (endIndex >= TAPE_MAX_INDEX) {\n      endIndex = TAPE_MAX_INDEX - 1;\n    }\n    while (endIndex - startIndex + 1 < TAPE_VIEW_SIZE) {\n      if (startIndex > 0) {\n        startIndex -= 1;\n      } else if (endIndex < TAPE_MAX_INDEX - 1) {\n        endIndex += 1;\n      } else {\n        break;\n      }\n    }\n\n    const fragment = document.createDocumentFragment();\n    for (let absolute = startIndex; absolute <= endIndex; absolute += 1) {\n      const value = this.getTapeValue(state, absolute);\n      const cell = document.createElement('div');\n      cell.className = 'tape-cell' + (absolute === pointer ? ' pointer' : '');\n\n      const position = document.createElement('span');\n      position.className = 'cell-index';\n      position.textContent = `@${absolute}`;\n\n      const number = document.createElement('span');\n      number.textContent = String(value);\n\n      cell.appendChild(position);\n      cell.appendChild(number);\n      fragment.appendChild(cell);\n    }\n    container.appendChild(fragment);\n  }\n\n  private getTapeValue(state: SessionState, index: number): number {\n    const offset = index - state.tape_start;\n    if (offset >= 0 && offset < state.tape.length) {\n      return state.tape[offset];\n    }\n    return 0;\n  }\n\n  private renderCodeWindow(code: string, pc: number): void {\n    if (!code) {\n      this.elements.codeWindow.textContent = '(empty)';\n      return;\n    }\n    const tokens: string[] = [];\n    for (let index = 0; index < code.length; index += 1) {\n      const classes = ['code-token'];\n      if (index === pc) {\n        classes.push('is-current');\n      }\n      if (this.state.currentBreakpoints.has(index)) {\n        classes.push('has-breakpoint');\n      }\n      tokens.push(`<span class=\"${classes.join(' ')}\" data-pc=\"${index}\">${formatCodeChar(code[index])}</span>`);\n    }\n    tokens.push(\n      `<span class=\"code-token${pc >= code.length ? ' is-current' : ''}\" data-pc=\"${code.length}\">[END]</span>`,\n    );\n\n    const lines: string[] = [];\n    for (let i = 0; i < tokens.length; i += CODE_LINE_WIDTH) {\n      const slice = tokens.slice(i, i + CODE_LINE_WIDTH).join('');\n      lines.push(`<div class=\"code-line\">${slice}</div>`);\n    }\n    this.elements.codeWindow.innerHTML = lines.join('');\n    const currentToken = this.elements.codeWindow.querySelector<HTMLElement>('.code-token.is-current');\n    currentToken?.scrollIntoView({ block: 'center', inline: 'nearest' });\n  }\n\n  private async createSession(): Promise<void> {\n    if (this.state.isBusy) {\n      return;\n    }\n    this.setBusy(true);\n    this.setStatus('Creating session...');\n    try {\n      const response = await api.createSession(this.getSessionPayload());\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as SessionPayload;\n      this.applySessionPayload(payload, { selectLatestHistory: true });\n      this.setStatus('Session ready.');\n    } catch (error) {\n      this.state.sessionId = null;\n      this.setStatus(`Failed to create session: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async stepSession(): Promise<void> {\n    if (this.state.isBusy) {\n      return;\n    }\n    if (!this.state.sessionId) {\n      await this.createSession();\n      return;\n    }\n    this.setBusy(true);\n    const count = clampPositiveInt(this.elements.stepCount.value, 1);\n    this.setStatus(`Stepping ${count} instruction${count > 1 ? 's' : ''}...`);\n    try {\n      const response = await api.stepSession(this.state.sessionId, { count });\n      if (response.status === 409) {\n        const detail = (await response.json()) as DetailPayload;\n        this.setStatus(detail.detail || 'Step limit exceeded.', true);\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as StepResponse;\n      this.applySessionPayload(payload, { selectLatestHistory: true });\n      if (payload.hit_breakpoint !== null && payload.hit_breakpoint !== undefined) {\n        this.setStatus(`Hit breakpoint at pc ${payload.hit_breakpoint}.`);\n      } else {\n        this.setStatus(payload.finished ? 'Program finished.' : 'Step complete.');\n      }\n    } catch (error) {\n      this.setStatus(`Failed to step: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async runSessionToEnd(): Promise<void> {\n    if (this.state.isBusy) {\n      return;\n    }\n    if (!this.state.sessionId) {\n      await this.createSession();\n      return;\n    }\n    this.setBusy(true);\n    this.setStatus('Running program to completion...');\n    try {\n      const response = await api.runSession(this.state.sessionId, { limit: DEFAULT_RUN_LIMIT, ignore_breakpoints: true });\n      if (response.status === 409) {\n        const detail = (await response.json()) as DetailPayload;\n        this.setStatus(detail.detail || 'Step limit exceeded.', true);\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as StepResponse;\n      this.applySessionPayload(payload, { selectLatestHistory: true });\n      this.setStatus(payload.finished ? 'Program finished.' : 'Stopped after max steps.');\n    } catch (error) {\n      this.setStatus(`Failed to run: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async runToBreakpoint(): Promise<void> {\n    if (this.state.isBusy) {\n      return;\n    }\n    if (!this.state.sessionId) {\n      await this.createSession();\n      return;\n    }\n    if (!this.state.currentBreakpoints.size) {\n      await this.runSessionToEnd();\n      return;\n    }\n    this.setBusy(true);\n    this.setStatus('Running until breakpoint or completion...');\n    try {\n      const rawLimit = parseInt(this.elements.stepCount.value, 10);\n      const body: RunRequest = {};\n      if (Number.isFinite(rawLimit) && rawLimit > 1) {\n        body.limit = rawLimit;\n      }\n      const response = await api.runSession(this.state.sessionId, body);\n      if (response.status === 409) {\n        const detail = (await response.json()) as DetailPayload;\n        this.setStatus(detail.detail || 'Step limit exceeded.', true);\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as StepResponse;\n      this.applySessionPayload(payload, { selectLatestHistory: true });\n      if (payload.hit_breakpoint !== null && payload.hit_breakpoint !== undefined) {\n        this.setStatus(`Stopped at breakpoint pc ${payload.hit_breakpoint}.`);\n      } else {\n        this.setStatus(payload.finished ? 'Program finished.' : 'Run completed.');\n      }\n    } catch (error) {\n      this.setStatus(`Failed to run: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async resetSession(): Promise<void> {\n    if (this.state.isBusy) {\n      return;\n    }\n    if (!this.state.sessionId) {\n      await this.createSession();\n      return;\n    }\n    this.setBusy(true);\n    this.setStatus('Resetting session...');\n    try {\n      const response = await api.resetSession(this.state.sessionId);\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as SessionPayload;\n      this.applySessionPayload(payload, { selectLatestHistory: true });\n      this.setStatus('Session reset.');\n    } catch (error) {\n      this.setStatus(`Failed to reset: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async addBreakpoint(pc: number): Promise<void> {\n    if (!this.state.sessionId) {\n      this.setStatus('Create a session before adding breakpoints.', true);\n      return;\n    }\n    if (!Number.isFinite(pc) || pc < 0) {\n      this.setStatus('Breakpoint must be a non-negative integer.', true);\n      return;\n    }\n    if (this.state.isBusy) {\n      this.setStatus('Another action is in progress.', true);\n      return;\n    }\n    this.setBusy(true);\n    this.setStatus(`Adding breakpoint at pc ${pc}...`);\n    try {\n      const body: BreakpointRequest = { pc };\n      const response = await api.addBreakpoint(this.state.sessionId, body);\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as SessionPayload;\n      this.applySessionPayload(payload, { selectLatestHistory: false });\n      this.setStatus(`Breakpoint added at pc ${pc}.`);\n    } catch (error) {\n      this.setStatus(`Failed to add breakpoint: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async removeBreakpoint(pc: number): Promise<void> {\n    if (!this.state.sessionId) {\n      return;\n    }\n    if (this.state.isBusy) {\n      this.setStatus('Another action is in progress.', true);\n      return;\n    }\n    this.setBusy(true);\n    try {\n      const response = await api.removeBreakpointRequest(this.state.sessionId, pc);\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n      const payload = (await response.json()) as SessionPayload;\n      this.applySessionPayload(payload, { selectLatestHistory: false });\n      this.setStatus(`Removed breakpoint at pc ${pc}.`);\n    } catch (error) {\n      this.setStatus(`Failed to remove breakpoint: ${this.describeError(error)}`, true);\n    } finally {\n      this.setBusy(false);\n    }\n  }\n\n  private async toggleBreakpoint(pc: number): Promise<void> {\n    if (!this.state.sessionId) {\n      this.setStatus('Create a session before toggling breakpoints.', true);\n      return;\n    }\n    if (pc < 0 || !Number.isFinite(pc) || pc >= this.state.brainfuckCode.length) {\n      return;\n    }\n    if (this.state.currentBreakpoints.has(pc)) {\n      await this.removeBreakpoint(pc);\n    } else {\n      await this.addBreakpoint(pc);\n    }\n  }\n\n  private describeError(error: unknown): string {\n    if (error instanceof Error && error.message) {\n      return error.message;\n    }\n    return String(error);\n  }\n}\n\nexport function bootstrap(): void {\n  const controller = new AppController();\n  controller.init();\n}\n", "import { bootstrap } from './controller';\n\nbootstrap();\n"],
  "mappings": "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",
  "names": []
}
